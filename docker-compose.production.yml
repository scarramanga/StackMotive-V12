# StackMotive Production Docker Compose
# Production-ready configuration with security and monitoring

version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:14-alpine
    container_name: stackmotive-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - /etc/postgresql/ssl:/var/lib/postgresql/ssl:ro
    networks:
      - stackmotive-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: stackmotive-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - stackmotive-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # StackMotive Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: stackmotive-app-prod
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "127.0.0.1:8000:8000"
      - "127.0.0.1:9090:9090"
    volumes:
      - app_logs_prod:/app/logs
      - app_uploads_prod:/app/uploads
      - /etc/ssl/certs:/etc/ssl/certs:ro
    networks:
      - stackmotive-prod-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/cache

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: stackmotive-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    networks:
      - stackmotive-prod-network
    depends_on:
      - app
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stackmotive-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9091:9090"
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - stackmotive-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: stackmotive-grafana-prod
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - stackmotive-prod-network
    depends_on:
      - prometheus
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: stackmotive-loki-prod
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data_prod:/loki
    networks:
      - stackmotive-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    profiles:
      - logging

  # Log Shipping
  promtail:
    image: grafana/promtail:latest
    container_name: stackmotive-promtail-prod
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs_prod:/var/log/app:ro
      - /var/log:/var/log:ro
    networks:
      - stackmotive-prod-network
    depends_on:
      - loki
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    profiles:
      - logging

  # Backup Service
  backup:
    image: postgres:14-alpine
    container_name: stackmotive-backup-prod
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - backup_data_prod:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - stackmotive-prod-network
    depends_on:
      - postgres
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    profiles:
      - backup

# Networks
networks:
  stackmotive-prod-network:
    driver: bridge
    name: stackmotive-prod-network
    driver_opts:
      com.docker.network.bridge.name: stackmotive-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data_prod:
    name: stackmotive-postgres-data-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/stackmotive/postgres
  
  redis_data_prod:
    name: stackmotive-redis-data-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/stackmotive/redis
  
  app_logs_prod:
    name: stackmotive-app-logs-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/stackmotive
  
  app_uploads_prod:
    name: stackmotive-app-uploads-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/stackmotive/uploads
  
  prometheus_data_prod:
    name: stackmotive-prometheus-data-prod
  
  grafana_data_prod:
    name: stackmotive-grafana-data-prod
  
  loki_data_prod:
    name: stackmotive-loki-data-prod
  
  backup_data_prod:
    name: stackmotive-backup-data-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/stackmotive 