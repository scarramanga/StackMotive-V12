# StackMotive Development Docker Compose
# Complete development environment with all services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: stackmotive-postgres
    environment:
      POSTGRES_DB: stackmotive
      POSTGRES_USER: stackmotive
      POSTGRES_PASSWORD: stackmotive123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - stackmotive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stackmotive -d stackmotive"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stackmotive-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stackmotive-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # StackMotive Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: stackmotive-app
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: stackmotive
      DB_USER: stackmotive
      DB_PASSWORD: stackmotive123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_PORT: 8000
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./cache:/app/cache
      - ./.env.development:/app/.env
    networks:
      - stackmotive-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Development Server (Optional)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: stackmotive-frontend
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - stackmotive-network
    depends_on:
      - app
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: stackmotive-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    networks:
      - stackmotive-network
    depends_on:
      - app
      - frontend
    restart: unless-stopped
    profiles:
      - full  # Only start with --profile full

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: stackmotive-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - stackmotive-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: stackmotive-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - stackmotive-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# Networks
networks:
  stackmotive-network:
    driver: bridge
    name: stackmotive-network

# Volumes
volumes:
  postgres_data:
    name: stackmotive-postgres-data
  redis_data:
    name: stackmotive-redis-data
  prometheus_data:
    name: stackmotive-prometheus-data
  grafana_data:
    name: stackmotive-grafana-data 