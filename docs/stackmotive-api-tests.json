{
  "info": {
    "name": "StackMotive Backend API Tests",
    "description": "Complete API test suite for StackMotive platform backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "maddy@stackmotiveapp.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "yhj@kzm4PYW-akj2jdg",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has access token', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('access_token');",
              "    pm.expect(responseJson.access_token).to.be.a('string');",
              "    ",
              "    // Store token for subsequent requests",
              "    pm.collectionVariables.set('authToken', responseJson.access_token);",
              "});",
              "",
              "pm.test('Response has correct token type', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('token_type');",
              "    pm.expect(responseJson.token_type).to.eql('bearer');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/login",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "login"
          ]
        }
      }
    },
    {
      "name": "2. Get User Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has user profile data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('email');",
              "    pm.expect(responseJson.email).to.eql('maddy@stackmotiveapp.com');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/me",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "user",
            "me"
          ]
        }
      }
    },
    {
      "name": "3. Get Trial Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has trial status data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('inTrial');",
              "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/trial-status",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "user",
            "trial-status"
          ]
        }
      }
    },
    {
      "name": "4. Get Paper Trading Account",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has paper trading account data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('name');",
              "    pm.expect(responseJson).to.have.property('cashBalance');",
              "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/paper-trading-account",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "user",
            "paper-trading-account"
          ]
        }
      }
    },
    {
      "name": "5. Get Portfolio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has portfolio data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('object');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/portfolio/combined",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "portfolio",
            "combined"
          ]
        }
      }
    },
    {
      "name": "6. Get Market Prices",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has market data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "    pm.expect(responseJson.length).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/market/prices",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "market",
            "prices"
          ]
        }
      }
    },
    {
      "name": "7. Get Watchlist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has watchlist data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/watchlist",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "watchlist"
          ]
        }
      }
    },
    {
      "name": "8. Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has health status', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status');",
              "    pm.expect(responseJson.status).to.eql('healthy');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "health"
          ]
        }
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script",
          "console.log('Running request to: ' + pm.request.url);"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ]
} 