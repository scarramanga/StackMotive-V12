{
  "collection": {
    "item": [
      {
        "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
        "name": "Health Check",
        "request": {
          "url": {
            "path": [
              "api",
              "health"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4fb8b76a-010f-4cc5-bb57-058a4700a7f7",
              "type": "text/javascript",
              "exec": [
                "pm.test('Health check returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Health check has correct response', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('status');",
                "    pm.expect(responseJson.status).to.eql('healthy');",
                "});"
              ],
              "_lastExecutionId": "d8d9c385-f5a3-4cbd-9080-b17afd8df896"
            }
          }
        ]
      },
      {
        "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
        "name": "Signup Flow - New User Registration",
        "request": {
          "url": {
            "path": [
              "api",
              "register"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83094c5d-40af-4eee-a38f-c65340e38347",
              "type": "text/javascript",
              "exec": [
                "// Generate unique email for new user",
                "const timestamp = Date.now();",
                "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
                "pm.collectionVariables.set('newUserEmail', newEmail);"
              ],
              "_lastExecutionId": "db60cd1b-e3c4-44d8-82ff-55e848c8bed1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea85e38a-e384-4660-a6b1-1443064e0538",
              "type": "text/javascript",
              "exec": [
                "pm.test('Registration successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Registration response has success message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message');",
                "    pm.expect(responseJson.message).to.include('successfully');",
                "});"
              ],
              "_lastExecutionId": "a754bb03-f61d-4f75-bcb2-0f181da4f1b6"
            }
          }
        ]
      },
      {
        "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
        "name": "Signup Flow - Login New User",
        "request": {
          "url": {
            "path": [
              "api",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "11ced270-42db-44cd-9f25-159db24ea82a",
              "type": "text/javascript",
              "exec": [
                "pm.test('New user login successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Login response has access token', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('access_token');",
                "    pm.expect(responseJson.access_token).to.be.a('string');",
                "    ",
                "    // Store token for subsequent requests",
                "    pm.collectionVariables.set('authToken', responseJson.access_token);",
                "});"
              ],
              "_lastExecutionId": "21ad8bf5-2414-46fc-954d-c78c340293a9"
            }
          }
        ]
      },
      {
        "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
        "name": "Onboarding - Check Initial Status",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "onboarding-status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "88648dee-6a87-4086-9695-e70a13ada111",
              "type": "text/javascript",
              "exec": [
                "pm.test('Onboarding status check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('New user has not completed onboarding', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
                "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                "});"
              ],
              "_lastExecutionId": "f102d3c0-26e2-4789-91eb-6c91eed2f99b"
            }
          }
        ]
      },
      {
        "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
        "name": "Paper Trading - Create Account for New User",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "paper-trading-account"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "73f58cb7-ea4b-4b33-97b2-adea645c6f20",
              "type": "text/javascript",
              "exec": [
                "pm.test('Paper trading account creation successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Paper trading account has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson).to.have.property('name');",
                "    pm.expect(responseJson).to.have.property('cashBalance');",
                "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
                "    ",
                "    // Store account ID for later tests",
                "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
                "});",
                "",
                "pm.test('New account has initial balance', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.cashBalance).to.be.above(0);",
                "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
                "});"
              ],
              "_lastExecutionId": "2eb46a84-608e-4081-9c2b-00f73ced0740"
            }
          }
        ]
      },
      {
        "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
        "name": "Portfolio - Check Empty Holdings",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "paper-trading-account",
              "{{paperAccountId}}",
              "holdings"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "acaf1222-2446-439f-88d3-97b37bb78ae7",
              "type": "text/javascript",
              "exec": [
                "pm.test('Holdings request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('New account has empty holdings', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('array');",
                "    pm.expect(responseJson).to.have.lengthOf(0);",
                "});"
              ],
              "_lastExecutionId": "82c029c7-8219-41c9-bdca-3a87eb98de84"
            }
          }
        ]
      },
      {
        "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
        "name": "Market Data - Get BTC Price",
        "request": {
          "url": {
            "path": [
              "api",
              "market",
              "price",
              "BTC"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d537154f-6d99-43ef-b017-f2c2cdb745bc",
              "type": "text/javascript",
              "exec": [
                "pm.test('Market price request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Price data has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('symbol');",
                "    pm.expect(responseJson).to.have.property('price');",
                "    pm.expect(responseJson.symbol).to.eql('BTC');",
                "    pm.expect(responseJson.price).to.be.a('number');",
                "});"
              ],
              "_lastExecutionId": "e19227c3-39b1-4a48-93ba-3ca1c3b95647"
            }
          }
        ]
      },
      {
        "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
        "name": "Watchlist - Get Mock Watchlist",
        "request": {
          "url": {
            "path": [
              "api",
              "watchlist"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "53bc779c-5a24-45a6-898f-0b89a3a0fc50",
              "type": "text/javascript",
              "exec": [
                "pm.test('Watchlist request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Watchlist returns mock data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('array');",
                "    pm.expect(responseJson).to.have.lengthOf(3);",
                "    pm.expect(responseJson[0]).to.have.property('symbol');",
                "    pm.expect(responseJson[0]).to.have.property('name');",
                "    pm.expect(responseJson[0]).to.have.property('price');",
                "});"
              ],
              "_lastExecutionId": "06d6d7f3-708a-4519-b833-61a242ba41da"
            }
          }
        ]
      },
      {
        "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
        "name": "Onboarding - Update Progress",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "onboarding",
              "progress"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"step\": 3\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "71cc0b9d-abf0-46b4-88da-fdfdb152f29f",
              "type": "text/javascript",
              "exec": [
                "pm.test('Onboarding progress update successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Progress update response is valid', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message');",
                "    pm.expect(responseJson.message).to.include('updated');",
                "});"
              ],
              "_lastExecutionId": "ade9b903-e1bb-44ca-be41-c55a23f7df6f"
            }
          }
        ]
      },
      {
        "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
        "name": "Onboarding - Complete Onboarding",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "onboarding-complete"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3bdca5ac-5abb-4a2f-ae83-ce72b22545ee",
              "type": "text/javascript",
              "exec": [
                "pm.test('Onboarding completion successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Completion response is valid', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message');",
                "    pm.expect(responseJson.message).to.include('updated');",
                "});"
              ],
              "_lastExecutionId": "924508d3-6464-423d-ae1e-a1f0c3af6ac3"
            }
          }
        ]
      },
      {
        "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
        "name": "Onboarding - Verify Completion",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "onboarding-status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e9215a02-b42b-4622-9039-739468bee848",
              "type": "text/javascript",
              "exec": [
                "pm.test('Onboarding status check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('User has completed onboarding', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "56df127f-8a90-4242-8f3f-1e4b80d27ecb"
            }
          }
        ]
      },
      {
        "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
        "name": "Trial Status - Check User Trial",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "trial-status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4ca16361-ecf8-475c-ba15-3f4f01ad0eda",
              "type": "text/javascript",
              "exec": [
                "pm.test('Trial status check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Trial status has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('inTrial');",
                "    pm.expect(responseJson).to.have.property('trialEndsAt');",
                "    pm.expect(responseJson).to.have.property('daysRemaining');",
                "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
                "});"
              ],
              "_lastExecutionId": "640bac8a-65f3-4981-aae8-1f0c6784f5bb"
            }
          }
        ]
      },
      {
        "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
        "name": "Portfolio - Get Combined Portfolio",
        "request": {
          "url": {
            "path": [
              "api",
              "portfolio",
              "combined"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0a810554-906b-46ba-833f-73a223db7669",
              "type": "text/javascript",
              "exec": [
                "pm.test('Portfolio request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Portfolio has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('totalValue');",
                "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                "    pm.expect(responseJson).to.have.property('accounts');",
                "});"
              ],
              "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
            }
          }
        ]
      },
      {
        "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
        "name": "JWT Security - Test Invalid Token",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid_token_12345"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "275db9ce-f0de-4556-a4f3-2beb5828cef6",
              "type": "text/javascript",
              "exec": [
                "pm.test('Invalid token returns 401', function () {",
                "    pm.response.to.have.status(401);",
                "});",
                "",
                "pm.test('Invalid token has correct error message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "    pm.expect(responseJson.detail).to.include('credentials');",
                "});"
              ],
              "_lastExecutionId": "42404eb4-9f79-4d82-a322-7bfb9033ce30"
            }
          }
        ]
      },
      {
        "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
        "name": "JWT Security - Test No Token",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "22a34126-8e58-4869-aee8-635d781edec3",
              "type": "text/javascript",
              "exec": [
                "pm.test('No token returns 401', function () {",
                "    pm.response.to.have.status(401);",
                "});",
                "",
                "pm.test('No token has correct error message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "    pm.expect(responseJson.detail).to.include('authenticated');",
                "});"
              ],
              "_lastExecutionId": "5df765a3-ffc2-451e-b774-5be1255efe1b"
            }
          }
        ]
      },
      {
        "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
        "name": "JWT Security - Test Malformed Token",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer malformed.token.here"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4d211a06-c288-4ad5-a25a-a0a7afd894b1",
              "type": "text/javascript",
              "exec": [
                "pm.test('Malformed token returns 401', function () {",
                "    pm.response.to.have.status(401);",
                "});",
                "",
                "pm.test('Malformed token has correct error message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "    pm.expect(responseJson.detail).to.include('credentials');",
                "});"
              ],
              "_lastExecutionId": "f33947b3-3f3f-44d6-bb7f-eede9611cd42"
            }
          }
        ]
      },
      {
        "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
        "name": "Error Handling - Invalid Registration",
        "request": {
          "url": {
            "path": [
              "api",
              "register"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0601b750-665e-46b4-b593-2056fbbb6367",
              "type": "text/javascript",
              "exec": [
                "pm.test('Invalid registration returns 422', function () {",
                "    pm.response.to.have.status(422);",
                "});",
                "",
                "pm.test('Invalid registration has validation error', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "});"
              ],
              "_lastExecutionId": "0c3137ba-1223-4471-b4d0-9b097834b034"
            }
          }
        ]
      },
      {
        "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
        "name": "Error Handling - Invalid Login",
        "request": {
          "url": {
            "path": [
              "api",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3daab57f-120e-498e-b1b2-3a31d69f4fcf",
              "type": "text/javascript",
              "exec": [
                "pm.test('Invalid login returns 401', function () {",
                "    pm.response.to.have.status(401);",
                "});",
                "",
                "pm.test('Invalid login has error message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "});"
              ],
              "_lastExecutionId": "3217438a-00a4-4bac-9cc6-f9b501455d0a"
            }
          }
        ]
      },
      {
        "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
        "name": "Error Handling - Duplicate Registration",
        "request": {
          "url": {
            "path": [
              "api",
              "register"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Duplicate registration returns 400', function () {",
                "    pm.response.to.have.status(400);",
                "});",
                "",
                "pm.test('Duplicate registration has error message', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('detail');",
                "    pm.expect(responseJson.detail).to.include('already exists');",
                "});"
              ],
              "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
            }
          }
        ]
      },
      {
        "id": "550e3200-6d90-45c5-8705-44e76540d205",
        "name": "Paper Trading - Attempt Duplicate Account Creation",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "paper-trading-account"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
              "type": "text/javascript",
              "exec": [
                "pm.test('Duplicate paper account returns existing account', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Returns existing account data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson).to.have.property('name');",
                "    pm.expect(responseJson).to.have.property('cashBalance');",
                "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                "});"
              ],
              "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
            }
          }
        ]
      },
      {
        "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
        "name": "Market Data - Get Market Prices",
        "request": {
          "url": {
            "path": [
              "api",
              "market",
              "prices"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9e5e5e98-0f6e-4af8-873c-7d2f5ca86e41",
              "type": "text/javascript",
              "exec": [
                "pm.test('Market prices request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Market prices has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('array');",
                "    if (responseJson.length > 0) {",
                "        pm.expect(responseJson[0]).to.have.property('symbol');",
                "        pm.expect(responseJson[0]).to.have.property('price');",
                "    }",
                "});"
              ],
              "_lastExecutionId": "543a54ca-f199-4696-b4d1-0fef6545bb7a"
            }
          }
        ]
      },
      {
        "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
        "name": "User Preferences - Get Preferences",
        "request": {
          "url": {
            "path": [
              "api",
              "user",
              "preferences"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{authToken}}"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4bd26aec-83ef-4c0c-a9f3-de578abf8ac9",
              "type": "text/javascript",
              "exec": [
                "pm.test('User preferences request successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Preferences has correct structure', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                "});"
              ],
              "_lastExecutionId": "175c51da-94af-4ec8-95a8-61b909f475e8"
            }
          }
        ]
      },
      {
        "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
        "name": "Final Health Check",
        "request": {
          "url": {
            "path": [
              "api",
              "health"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b790704b-5fc6-465f-944d-b9626c13e04c",
              "type": "text/javascript",
              "exec": [
                "pm.test('Final health check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('System remains healthy after all tests', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('status');",
                "    pm.expect(responseJson.status).to.eql('healthy');",
                "});"
              ],
              "_lastExecutionId": "05bd6a53-86f4-4a0a-a883-04bea028c77f"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8000",
        "key": "baseUrl"
      },
      {
        "type": "string",
        "value": "",
        "key": "authToken"
      },
      {
        "type": "string",
        "value": "",
        "key": "newUserEmail"
      },
      {
        "type": "string",
        "value": "TestPassword123!",
        "key": "newUserPassword"
      },
      {
        "type": "string",
        "value": "",
        "key": "paperAccountId"
      },
      {
        "type": "string",
        "value": "maddy@stackmotiveapp.com",
        "key": "testEmail"
      },
      {
        "type": "string",
        "value": "yhj@kzm4PYW-akj2jdg",
        "key": "testPassword"
      }
    ],
    "info": {
      "_postman_id": "ff5ffe1b-c148-46ce-97fa-b8c2630e1985",
      "name": "StackMotive Comprehensive API Tests - Fixed",
      "version": {
        "raw": "2.1.0",
        "major": 2,
        "minor": 1,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "2.1.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Extended API test suite covering signup, onboarding, paper trading, JWT handling, and comprehensive user flows - corrected for actual endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "5f0d9c97-e1e2-4077-bc6e-59e1b104b51d",
    "values": []
  },
  "globals": {
    "id": "4ce55d9b-9a78-46be-9011-808526d9b4f8",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 23,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 23,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 23,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 23,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 47,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 23,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18.08695652173913,
      "responseMin": 1,
      "responseMax": 182,
      "responseSd": 50.492283563262355,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1749085034681,
      "completed": 1749085035330
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 23,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "57feb124-8be6-43a4-934a-c1d0a1c11872",
          "httpRequestId": "4d651e3e-d323-40ac-a7c9-1128c577c992"
        },
        "item": {
          "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4fb8b76a-010f-4cc5-bb57-058a4700a7f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check has correct response', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});"
                ],
                "_lastExecutionId": "d8d9c385-f5a3-4cbd-9080-b17afd8df896"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84ff6675-bc55-44ad-9425-cab9424da084",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9e4a0b98-a516-4a05-94d6-6eafbfe39575",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "77"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              99,
              107,
              77,
              111,
              116,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 77
        },
        "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
        "assertions": [
          {
            "assertion": "Health check returns 200",
            "skipped": false
          },
          {
            "assertion": "Health check has correct response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "68e102e1-45d5-419f-9c62-98f57dfae3bd",
          "length": 23,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9bc7c7ba-6942-48e3-8a78-651b9ff7b458"
        },
        "item": {
          "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
          "name": "Signup Flow - New User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "83094c5d-40af-4eee-a38f-c65340e38347",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for new user",
                  "const timestamp = Date.now();",
                  "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
                  "pm.collectionVariables.set('newUserEmail', newEmail);"
                ],
                "_lastExecutionId": "db60cd1b-e3c4-44d8-82ff-55e848c8bed1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea85e38a-e384-4660-a6b1-1443064e0538",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Registration response has success message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('successfully');",
                  "});"
                ],
                "_lastExecutionId": "a754bb03-f61d-4f75-bcb2-0f181da4f1b6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ceec04d4-22a9-4609-a813-741303b68b34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test-user-1749085034716@stackmotive.com\",\n  \"password\": \"TestPassword123!\"\n}"
          }
        },
        "response": {
          "id": "7ce5b3bc-5c56-4b25-b99f-db15ddee2970",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "52"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              56,
              49,
              125
            ]
          },
          "cookie": [],
          "responseTime": 181,
          "responseSize": 52
        },
        "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
        "assertions": [
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Registration response has success message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a231e9d-1c74-481e-b9de-54c806ebf658",
          "length": 23,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "992d5b11-4a73-4fba-8a33-dd91d2c226ef"
        },
        "item": {
          "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
          "name": "Signup Flow - Login New User",
          "request": {
            "url": {
              "path": [
                "api",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11ced270-42db-44cd-9f25-159db24ea82a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('New user login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login response has access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.expect(responseJson.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', responseJson.access_token);",
                  "});"
                ],
                "_lastExecutionId": "21ad8bf5-2414-46fc-954d-c78c340293a9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb4dcf55-93f5-472d-9fc1-690c83559c10",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test-user-1749085034716@stackmotive.com\",\n  \"password\": \"TestPassword123!\"\n}"
          }
        },
        "response": {
          "id": "81825e26-1eef-447b-8b52-62d350cd0cd3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "210"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "set-cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8; HttpOnly; Max-Age=2592000; Path=/api; SameSite=lax; Secure"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              122,
              100,
              87,
              73,
              105,
              79,
              105,
              74,
              48,
              90,
              88,
              78,
              48,
              76,
              88,
              86,
              122,
              90,
              88,
              73,
              116,
              77,
              84,
              99,
              48,
              79,
              84,
              65,
              52,
              78,
              84,
              65,
              122,
              78,
              68,
              99,
              120,
              78,
              107,
              66,
              122,
              100,
              71,
              70,
              106,
              97,
              50,
              49,
              118,
              100,
              71,
              108,
              50,
              90,
              83,
              53,
              106,
              98,
              50,
              48,
              105,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              68,
              107,
              119,
              79,
              68,
              89,
              52,
              77,
              122,
              86,
              57,
              46,
              45,
              122,
              89,
              79,
              78,
              48,
              56,
              114,
              69,
              83,
              105,
              80,
              57,
              98,
              120,
              71,
              112,
              77,
              104,
              115,
              84,
              100,
              50,
              74,
              54,
              106,
              110,
              117,
              122,
              82,
              54,
              116,
              88,
              101,
              113,
              73,
              51,
              104,
              53,
              56,
              52,
              85,
              48,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 182,
          "responseSize": 210
        },
        "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
        "assertions": [
          {
            "assertion": "New user login successful",
            "skipped": false
          },
          {
            "assertion": "Login response has access token",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b85d7d0-ff4c-466b-b53f-37c8fcc805ff",
          "length": 23,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "27c42b2d-4c4c-42a0-b0b1-79198532423a"
        },
        "item": {
          "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
          "name": "Onboarding - Check Initial Status",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "onboarding-status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88648dee-6a87-4086-9695-e70a13ada111",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Onboarding status check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New user has not completed onboarding', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                  "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
                  "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                  "});"
                ],
                "_lastExecutionId": "f102d3c0-26e2-4789-91eb-6c91eed2f99b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "onboarding-status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ca142953-937e-4134-853e-25c3f24bd764",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "da930abf-a3af-40dc-9dcc-668e5d488fbc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "77"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              67,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 77
        },
        "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
        "assertions": [
          {
            "assertion": "Onboarding status check successful",
            "skipped": false
          },
          {
            "assertion": "New user has not completed onboarding",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bf77620e-b52d-4e23-b6bb-06f09dae7dc7",
          "length": 23,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bad26167-a278-4a94-b338-2582846072f1"
        },
        "item": {
          "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
          "name": "Paper Trading - Create Account for New User",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "paper-trading-account"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "73f58cb7-ea4b-4b33-97b2-adea645c6f20",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Paper trading account creation successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Paper trading account has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('cashBalance');",
                  "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
                  "    ",
                  "    // Store account ID for later tests",
                  "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
                  "});",
                  "",
                  "pm.test('New account has initial balance', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.cashBalance).to.be.above(0);",
                  "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
                  "});"
                ],
                "_lastExecutionId": "2eb46a84-608e-4081-9c2b-00f73ced0740"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "paper-trading-account"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "774d2c80-1b21-47ce-9ff0-cd5f9a656381",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "88",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
          }
        },
        "response": {
          "id": "b4a1f299-cd60-4ad7-86c7-55c1c8e1246e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              57,
              44,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              56,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              97,
              112,
              101,
              114,
              32,
              84,
              114,
              97,
              100,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              116,
              114,
              97,
              116,
              101,
              103,
              121,
              78,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              83,
              116,
              114,
              97,
              116,
              101,
              103,
              121,
              82,
              117,
              110,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              99,
              97,
              115,
              104,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              72,
              111,
              108,
              100,
              105,
              110,
              103,
              115,
              86,
              97,
              108,
              117,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              86,
              97,
              108,
              117,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              114,
              111,
              102,
              105,
              116,
              76,
              111,
              115,
              115,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              114,
              111,
              102,
              105,
              116,
              76,
              111,
              115,
              115,
              80,
              101,
              114,
              99,
              101,
              110,
              116,
              34,
              58,
              48,
              46,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 385
        },
        "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
        "assertions": [
          {
            "assertion": "Paper trading account creation successful",
            "skipped": false
          },
          {
            "assertion": "Paper trading account has correct structure",
            "skipped": false
          },
          {
            "assertion": "New account has initial balance",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "798e6d99-4040-41ec-975e-a1376e8af521",
          "length": 23,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57ea67c8-c7f1-4737-bf00-c48d8d168e11"
        },
        "item": {
          "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
          "name": "Portfolio - Check Empty Holdings",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "paper-trading-account",
                "{{paperAccountId}}",
                "holdings"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acaf1222-2446-439f-88d3-97b37bb78ae7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Holdings request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New account has empty holdings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.lengthOf(0);",
                  "});"
                ],
                "_lastExecutionId": "82c029c7-8219-41c9-bdca-3a87eb98de84"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "paper-trading-account",
              "79",
              "holdings"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "363914a6-16e7-4080-b73d-202c000f605a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d148462f-92b6-4b46-a45b-abba0b0ed5a8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              93
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 2
        },
        "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
        "assertions": [
          {
            "assertion": "Holdings request successful",
            "skipped": false
          },
          {
            "assertion": "New account has empty holdings",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "081e79c1-3934-412f-b7a5-501c6c56d0aa",
          "length": 23,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ee312c5a-604c-49cc-a1f0-52b16cbba43d"
        },
        "item": {
          "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
          "name": "Market Data - Get BTC Price",
          "request": {
            "url": {
              "path": [
                "api",
                "market",
                "price",
                "BTC"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d537154f-6d99-43ef-b017-f2c2cdb745bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Market price request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Price data has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('symbol');",
                  "    pm.expect(responseJson).to.have.property('price');",
                  "    pm.expect(responseJson.symbol).to.eql('BTC');",
                  "    pm.expect(responseJson.price).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "e19227c3-39b1-4a48-93ba-3ca1c3b95647"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "market",
              "price",
              "BTC"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "780b7d04-7d40-45bd-916b-3f0665289654",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f6df0f56-5371-4808-8fd5-5a50437a3d40",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "91"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              57,
              53,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 91
        },
        "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
        "assertions": [
          {
            "assertion": "Market price request successful",
            "skipped": false
          },
          {
            "assertion": "Price data has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "16deaf21-5100-41d8-85f8-b52ef91283cf",
          "length": 23,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "92fc1d77-917c-4e55-853f-27298bebe4b3"
        },
        "item": {
          "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
          "name": "Watchlist - Get Mock Watchlist",
          "request": {
            "url": {
              "path": [
                "api",
                "watchlist"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53bc779c-5a24-45a6-898f-0b89a3a0fc50",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Watchlist request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Watchlist returns mock data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.lengthOf(3);",
                  "    pm.expect(responseJson[0]).to.have.property('symbol');",
                  "    pm.expect(responseJson[0]).to.have.property('name');",
                  "    pm.expect(responseJson[0]).to.have.property('price');",
                  "});"
                ],
                "_lastExecutionId": "06d6d7f3-708a-4519-b833-61a242ba41da"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "watchlist"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0209117c-e9f3-4fef-91c7-53fc3b360da8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e285f09d-dd16-46c8-86a9-7514250c8b08",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "319"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              34,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              52,
              53,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              95,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              53,
              44,
              34,
              109,
              97,
              114,
              107,
              101,
              116,
              95,
              99,
              97,
              112,
              34,
              58,
              56,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              50,
              34,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              69,
              84,
              72,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              116,
              104,
              101,
              114,
              101,
              117,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              51,
              50,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              95,
              50,
              52,
              104,
              34,
              58,
              45,
              49,
              46,
              50,
              44,
              34,
              109,
              97,
              114,
              107,
              101,
              116,
              95,
              99,
              97,
              112,
              34,
              58,
              51,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              34,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              78,
              86,
              68,
              65,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              86,
              73,
              68,
              73,
              65,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              56,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              95,
              50,
              52,
              104,
              34,
              58,
              51,
              46,
              49,
              44,
              34,
              109,
              97,
              114,
              107,
              101,
              116,
              95,
              99,
              97,
              112,
              34,
              58,
              51,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 319
        },
        "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
        "assertions": [
          {
            "assertion": "Watchlist request successful",
            "skipped": false
          },
          {
            "assertion": "Watchlist returns mock data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e54199fe-5849-495d-b0d2-4825459b8900",
          "length": 23,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b9baa75d-9168-41ec-bbad-a83b02d0e42a"
        },
        "item": {
          "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
          "name": "Onboarding - Update Progress",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "onboarding",
                "progress"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"step\": 3\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71cc0b9d-abf0-46b4-88da-fdfdb152f29f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Onboarding progress update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Progress update response is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "ade9b903-e1bb-44ca-be41-c55a23f7df6f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "onboarding",
              "progress"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12568274-acb2-4a5a-9866-0c957d15aff5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "15",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"step\": 3\n}"
          }
        },
        "response": {
          "id": "443e46e6-95a8-4b96-b84d-bafb5e4320ec",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "91"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              32,
              112,
              114,
              111,
              103,
              114,
              101,
              115,
              115,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              101,
              112,
              34,
              58,
              51,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 91
        },
        "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
        "assertions": [
          {
            "assertion": "Onboarding progress update successful",
            "skipped": false
          },
          {
            "assertion": "Progress update response is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "303e76eb-6fd4-4b69-9c14-04bfc67c62a7",
          "length": 23,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cb13c91e-6636-46d1-ae06-b818669867d9"
        },
        "item": {
          "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
          "name": "Onboarding - Complete Onboarding",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "onboarding-complete"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bdca5ac-5abb-4a2f-ae83-ce72b22545ee",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Onboarding completion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Completion response is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "924508d3-6464-423d-ae1e-a1f0c3af6ac3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "onboarding-complete"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb0d1fac-87fd-4c10-bc97-bd220d32459d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "36",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
          }
        },
        "response": {
          "id": "a4612da4-2b55-4608-99b8-249e32fd024c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "153"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              32,
              115,
              116,
              97,
              116,
              117,
              115,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              104,
              97,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              53,
              46,
              49,
              56,
              50,
              56,
              53,
              53,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 153
        },
        "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
        "assertions": [
          {
            "assertion": "Onboarding completion successful",
            "skipped": false
          },
          {
            "assertion": "Completion response is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7d3f61ba-87f9-4787-bd29-9d406c07b084",
          "length": 23,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "497949bd-7480-4392-9c27-bc065506f873"
        },
        "item": {
          "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
          "name": "Onboarding - Verify Completion",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "onboarding-status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9215a02-b42b-4622-9039-739468bee848",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Onboarding status check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User has completed onboarding', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                  "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "56df127f-8a90-4242-8f3f-1e4b80d27ecb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "onboarding-status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02a9ed1f-2e0c-448b-8c9e-0841d71bb133",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1bc84f0c-5a70-4d6d-b01c-62f8516cc0c7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "100"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              67,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              53,
              46,
              49,
              56,
              50,
              56,
              53,
              53,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 100
        },
        "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
        "assertions": [
          {
            "assertion": "Onboarding status check successful",
            "skipped": false
          },
          {
            "assertion": "User has completed onboarding",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "961f4fe4-82b1-4aba-9e23-abf3f4c4575a",
          "length": 23,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "76e89fcf-fdfc-4110-ba3d-4c6d6bec6859"
        },
        "item": {
          "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
          "name": "Trial Status - Check User Trial",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "trial-status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ca16361-ecf8-475c-ba15-3f4f01ad0eda",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Trial status check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Trial status has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('inTrial');",
                  "    pm.expect(responseJson).to.have.property('trialEndsAt');",
                  "    pm.expect(responseJson).to.have.property('daysRemaining');",
                  "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
                  "});"
                ],
                "_lastExecutionId": "640bac8a-65f3-4981-aae8-1f0c6784f5bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "trial-status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "556e6cd1-18dc-419e-8e44-c42ed188cc97",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ad05bfdd-f08f-4ae3-8b8a-d120fc54249c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "160"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              110,
              84,
              114,
              105,
              97,
              108,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              116,
              114,
              105,
              97,
              108,
              69,
              110,
              100,
              115,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              84,
              114,
              105,
              97,
              108,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              121,
              115,
              82,
              101,
              109,
              97,
              105,
              110,
              105,
              110,
              103,
              34,
              58,
              50,
              57,
              44,
              34,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              34,
              58,
              91,
              34,
              112,
              97,
              112,
              101,
              114,
              45,
              116,
              114,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              114,
              101,
              97,
              108,
              45,
              116,
              105,
              109,
              101,
              45,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              45,
              116,
              114,
              97,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 160
        },
        "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
        "assertions": [
          {
            "assertion": "Trial status check successful",
            "skipped": false
          },
          {
            "assertion": "Trial status has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "08e8f106-7179-47c0-9427-83583ca446ba",
          "length": 23,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "969ebe82-1fea-4ee3-bd8a-225b488fedfb"
        },
        "item": {
          "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
          "name": "Portfolio - Get Combined Portfolio",
          "request": {
            "url": {
              "path": [
                "api",
                "portfolio",
                "combined"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a810554-906b-46ba-833f-73a223db7669",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Portfolio request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Portfolio has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('totalValue');",
                  "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                  "    pm.expect(responseJson).to.have.property('accounts');",
                  "});"
                ],
                "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "portfolio",
              "combined"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4323dde-ad4c-45e0-8214-b16fad372ad8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c14eba41-f2af-4a48-9222-ffb160ea0e27",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "275"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              109,
              98,
              105,
              110,
              101,
              100,
              72,
              111,
              108,
              100,
              105,
              110,
              103,
              115,
              34,
              58,
              91,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              46,
              50,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              57,
              53,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              69,
              84,
              72,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              56,
              46,
              53,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              50,
              57,
              55,
              53,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              84,
              83,
              76,
              65,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              46,
              48,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              49,
              50,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              65,
              80,
              76,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              53,
              46,
              48,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              50,
              57,
              51,
              50,
              46,
              53,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              71,
              79,
              79,
              71,
              76,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              52,
              57,
              55,
              46,
              52,
              125,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              86,
              97,
              108,
              117,
              101,
              34,
              58,
              49,
              50,
              57,
              51,
              55,
              57,
              46,
              57,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 275
        },
        "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
        "assertions": [
          {
            "assertion": "Portfolio request successful",
            "skipped": false
          },
          {
            "assertion": "Portfolio has correct structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Portfolio has correct structure",
              "message": "expected { combinedHoldings: [ …(5) ], …(1) } to have property 'totalProfitLoss'",
              "stack": "AssertionError: expected { combinedHoldings: [ …(5) ], …(1) } to have property 'totalProfitLoss'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ff777e1f-5b96-49d0-b6a5-95b75109eb04",
          "length": 23,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e056d688-d314-48de-b5cb-4f2868afe1b5"
        },
        "item": {
          "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
          "name": "JWT Security - Test Invalid Token",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "275db9ce-f0de-4556-a4f3-2beb5828cef6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Invalid token has correct error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "    pm.expect(responseJson.detail).to.include('credentials');",
                  "});"
                ],
                "_lastExecutionId": "42404eb4-9f79-4d82-a322-7bfb9033ce30"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid_token_12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7ad62c97-7f9f-4a9a-beba-acb5bbeb8958",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d00b294c-59ce-490b-9d62-0585f5459c86",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "www-authenticate",
              "value": "Bearer"
            },
            {
              "key": "content-length",
              "value": "43"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 43
        },
        "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
        "assertions": [
          {
            "assertion": "Invalid token returns 401",
            "skipped": false
          },
          {
            "assertion": "Invalid token has correct error message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3957b502-95fd-49bf-9d73-b5474074962a",
          "length": 23,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "30656d9c-7d57-48f7-b8da-10df663bad84"
        },
        "item": {
          "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
          "name": "JWT Security - Test No Token",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22a34126-8e58-4869-aee8-635d781edec3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('No token returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('No token has correct error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "    pm.expect(responseJson.detail).to.include('authenticated');",
                  "});"
                ],
                "_lastExecutionId": "5df765a3-ffc2-451e-b774-5be1255efe1b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9e9081c-23aa-44a6-93e0-44728829495c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5e8120fd-6308-4e24-9945-cf1fa5231b09",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "www-authenticate",
              "value": "Bearer"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
        "assertions": [
          {
            "assertion": "No token returns 401",
            "skipped": false
          },
          {
            "assertion": "No token has correct error message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "71ad7d43-b28f-451d-9e27-ecf5c7ca4e94",
          "length": 23,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bf3e7bb2-a91d-42d7-9cf7-3efb559ca242"
        },
        "item": {
          "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
          "name": "JWT Security - Test Malformed Token",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer malformed.token.here"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4d211a06-c288-4ad5-a25a-a0a7afd894b1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed token returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Malformed token has correct error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "    pm.expect(responseJson.detail).to.include('credentials');",
                  "});"
                ],
                "_lastExecutionId": "f33947b3-3f3f-44d6-bb7f-eede9611cd42"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer malformed.token.here"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c713040e-f59f-4246-815a-4af3274dabcb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0c7e699a-57ec-4471-9dfc-e567256295b1",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "www-authenticate",
              "value": "Bearer"
            },
            {
              "key": "content-length",
              "value": "43"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 43
        },
        "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
        "assertions": [
          {
            "assertion": "Malformed token returns 401",
            "skipped": false
          },
          {
            "assertion": "Malformed token has correct error message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b2202e27-da5c-4851-825e-a6111ef2e0f7",
          "length": 23,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19abac86-77aa-4370-9c91-e1339ea24151"
        },
        "item": {
          "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
          "name": "Error Handling - Invalid Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0601b750-665e-46b4-b593-2056fbbb6367",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid registration returns 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Invalid registration has validation error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "0c3137ba-1223-4471-b4d0-9b097834b034"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47f43cf5-f8dd-4e06-93de-1d9563a4dd2d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "51",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
          }
        },
        "response": {
          "id": "a37316f8-39bd-4ee5-bf81-5ac6ddb30e81",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "474"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              95,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              97,
              32,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              58,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              46,
              32,
              73,
              116,
              32,
              109,
              117,
              115,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              101,
              120,
              97,
              99,
              116,
              108,
              121,
              32,
              111,
              110,
              101,
              32,
              64,
              45,
              115,
              105,
              103,
              110,
              46,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              46,
              32,
              73,
              116,
              32,
              109,
              117,
              115,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              101,
              120,
              97,
              99,
              116,
              108,
              121,
              32,
              111,
              110,
              101,
              32,
              64,
              45,
              115,
              105,
              103,
              110,
              46,
              34,
              125,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              115,
              116,
              114,
              105,
              110,
              103,
              95,
              116,
              111,
              111,
              95,
              115,
              104,
              111,
              114,
              116,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              83,
              116,
              114,
              105,
              110,
              103,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              116,
              32,
              108,
              101,
              97,
              115,
              116,
              32,
              54,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              34,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              109,
              105,
              110,
              95,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              54,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              54,
              47,
              118,
              47,
              115,
              116,
              114,
              105,
              110,
              103,
              95,
              116,
              111,
              111,
              95,
              115,
              104,
              111,
              114,
              116,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 474
        },
        "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
        "assertions": [
          {
            "assertion": "Invalid registration returns 422",
            "skipped": false
          },
          {
            "assertion": "Invalid registration has validation error",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "964f0a50-cf7f-457b-901e-647c0c7f47fe",
          "length": 23,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1a907d41-b378-4fc8-b968-db233fb6f064"
        },
        "item": {
          "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
          "name": "Error Handling - Invalid Login",
          "request": {
            "url": {
              "path": [
                "api",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3daab57f-120e-498e-b1b2-3a31d69f4fcf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid login returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Invalid login has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "3217438a-00a4-4bac-9cc6-f9b501455d0a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f237d12a-eecf-4646-9cbd-e802e9d77e81",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "71",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
          }
        },
        "response": {
          "id": "d7d208b8-0307-446d-a686-39e569f1b7c6",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "www-authenticate",
              "value": "Bearer"
            },
            {
              "key": "content-length",
              "value": "40"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 40
        },
        "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
        "assertions": [
          {
            "assertion": "Invalid login returns 401",
            "skipped": false
          },
          {
            "assertion": "Invalid login has error message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "67541028-8fb7-460f-8e6b-a311ac38f4f0",
          "length": 23,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "95c15f42-5510-4c59-af6f-6d2291727758"
        },
        "item": {
          "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
          "name": "Error Handling - Duplicate Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate registration returns 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Duplicate registration has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "    pm.expect(responseJson.detail).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "083ca9b9-5a25-4be2-9d8a-0e7b53872c2a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test-user-1749085034716@stackmotive.com\",\n  \"password\": \"TestPassword123!\"\n}"
          }
        },
        "response": {
          "id": "b3f221f1-fd3f-4c08-a06c-479ee4d41ab9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "37"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 37
        },
        "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
        "assertions": [
          {
            "assertion": "Duplicate registration returns 400",
            "skipped": false
          },
          {
            "assertion": "Duplicate registration has error message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Duplicate registration has error message",
              "message": "expected 'Email already registered' to include 'already exists'",
              "stack": "AssertionError: expected 'Email already registered' to include 'already exists'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b66c497-e8bb-4338-8aec-539593f44a26",
          "length": 23,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1d099b02-6f97-42d3-9bd0-1d48e5772458"
        },
        "item": {
          "id": "550e3200-6d90-45c5-8705-44e76540d205",
          "name": "Paper Trading - Attempt Duplicate Account Creation",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "paper-trading-account"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate paper account returns existing account', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Returns existing account data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('cashBalance');",
                  "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                  "});"
                ],
                "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "paper-trading-account"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9bec0d8f-234f-4f23-8b60-9b4008afd33b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "87",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
          }
        },
        "response": {
          "id": "b5e6c366-e538-4d92-96fd-ccfcae94ee1d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              57,
              44,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              56,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              97,
              112,
              101,
              114,
              32,
              84,
              114,
              97,
              100,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              116,
              114,
              97,
              116,
              101,
              103,
              121,
              78,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              83,
              116,
              114,
              97,
              116,
              101,
              103,
              121,
              82,
              117,
              110,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              48,
              53,
              84,
              48,
              48,
              58,
              53,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              99,
              97,
              115,
              104,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              72,
              111,
              108,
              100,
              105,
              110,
              103,
              115,
              86,
              97,
              108,
              117,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              86,
              97,
              108,
              117,
              101,
              34,
              58,
              49,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              114,
              111,
              102,
              105,
              116,
              76,
              111,
              115,
              115,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              114,
              111,
              102,
              105,
              116,
              76,
              111,
              115,
              115,
              80,
              101,
              114,
              99,
              101,
              110,
              116,
              34,
              58,
              48,
              46,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 385
        },
        "id": "550e3200-6d90-45c5-8705-44e76540d205",
        "assertions": [
          {
            "assertion": "Duplicate paper account returns existing account",
            "skipped": false
          },
          {
            "assertion": "Returns existing account data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Returns existing account data",
              "message": "expected 79 to deeply equal '79'",
              "stack": "AssertionError: expected 79 to deeply equal '79'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8554c61-986e-40cb-a905-9315f6bf9912",
          "length": 23,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e5bfd7e5-5dce-40e4-ab17-3bb13f5df245"
        },
        "item": {
          "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
          "name": "Market Data - Get Market Prices",
          "request": {
            "url": {
              "path": [
                "api",
                "market",
                "prices"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e5e5e98-0f6e-4af8-873c-7d2f5ca86e41",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Market prices request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Market prices has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    if (responseJson.length > 0) {",
                  "        pm.expect(responseJson[0]).to.have.property('symbol');",
                  "        pm.expect(responseJson[0]).to.have.property('price');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "543a54ca-f199-4696-b4d1-0fef6545bb7a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "market",
              "prices"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2d4841f-1d8e-4c94-a622-5aed77cec47a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e18a92c3-3ce7-4905-8fda-7ccbedbfae74",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2931"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              57,
              53,
              48,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              69,
              84,
              72,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              116,
              104,
              101,
              114,
              101,
              117,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              51,
              53,
              48,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              49,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              68,
              65,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              114,
              100,
              97,
              110,
              111,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              48,
              46,
              56,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              53,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              83,
              79,
              76,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              108,
              97,
              110,
              97,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              50,
              48,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              51,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              68,
              79,
              84,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              108,
              107,
              97,
              100,
              111,
              116,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              56,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              48,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              51,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              77,
              65,
              84,
              73,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              111,
              108,
              121,
              103,
              111,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              46,
              50,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              52,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              52,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              86,
              65,
              88,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              118,
              97,
              108,
              97,
              110,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              52,
              53,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              54,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              76,
              73,
              78,
              75,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              105,
              110,
              108,
              105,
              110,
              107,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              56,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              50,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              55,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              85,
              78,
              73,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              110,
              105,
              115,
              119,
              97,
              112,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              53,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              76,
              84,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              116,
              101,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              56,
              53,
              46,
              48,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              48,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              57,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              88,
              82,
              80,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              105,
              112,
              112,
              108,
              101,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              48,
              46,
              54,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              68,
              79,
              71,
              69,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              103,
              101,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              48,
              46,
              48,
              56,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              53,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              54,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              65,
              80,
              76,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              57,
              53,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              53,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              77,
              69,
              84,
              65,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              101,
              116,
              97,
              32,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              115,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              52,
              50,
              53,
              46,
              51,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              48,
              46,
              57,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              71,
              79,
              79,
              71,
              76,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              112,
              104,
              97,
              98,
              101,
              116,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              54,
              53,
              46,
              56,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              52,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              77,
              83,
              70,
              84,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              114,
              111,
              115,
              111,
              102,
              116,
              32,
              67,
              111,
              114,
              112,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              52,
              49,
              53,
              46,
              50,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              49,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              77,
              90,
              78,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              109,
              97,
              122,
              111,
              110,
              46,
              99,
              111,
              109,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              56,
              53,
              46,
              55,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              51,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              57,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              84,
              83,
              76,
              65,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              108,
              97,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              52,
              56,
              46,
              57,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              50,
              46,
              53,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              55,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              78,
              86,
              68,
              65,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              86,
              73,
              68,
              73,
              65,
              32,
              67,
              111,
              114,
              112,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              56,
              46,
              52,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              51,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              52,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              78,
              70,
              76,
              88,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              116,
              102,
              108,
              105,
              120,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              54,
              57,
              53,
              46,
              50,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              56,
              53,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              77,
              68,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              77,
              68,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              48,
              53,
              46,
              56,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              51,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              51,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              74,
              80,
              77,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              80,
              77,
              111,
              114,
              103,
              97,
              110,
              32,
              67,
              104,
              97,
              115,
              101,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              55,
              53,
              46,
              52,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              55,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              86,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              105,
              115,
              97,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              53,
              48,
              46,
              54,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              74,
              78,
              74,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              32,
              38,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              54,
              48,
              46,
              50,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              48,
              46,
              51,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              56,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              87,
              77,
              84,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              97,
              108,
              109,
              97,
              114,
              116,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              53,
              56,
              46,
              57,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              54,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              52,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              80,
              71,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              99,
              116,
              101,
              114,
              32,
              38,
              32,
              71,
              97,
              109,
              98,
              108,
              101,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              52,
              53,
              46,
              51,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              55,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              72,
              68,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              109,
              101,
              32,
              68,
              101,
              112,
              111,
              116,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              51,
              51,
              53,
              46,
              56,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              52,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              57,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              65,
              67,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              97,
              110,
              107,
              32,
              111,
              102,
              32,
              65,
              109,
              101,
              114,
              105,
              99,
              97,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              51,
              56,
              46,
              53,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              46,
              50,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              52,
              53,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              68,
              73,
              83,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              97,
              108,
              116,
              32,
              68,
              105,
              115,
              110,
              101,
              121,
              32,
              67,
              111,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              57,
              53,
              46,
              52,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              49,
              46,
              49,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              54,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              75,
              79,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              99,
              97,
              45,
              67,
              111,
              108,
              97,
              32,
              67,
              111,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              54,
              50,
              46,
              51,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              48,
              46,
              52,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              49,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              80,
              70,
              69,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              102,
              105,
              122,
              101,
              114,
              32,
              73,
              110,
              99,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              56,
              46,
              55,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              45,
              48,
              46,
              54,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              50,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              88,
              79,
              77,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              120,
              111,
              110,
              32,
              77,
              111,
              98,
              105,
              108,
              32,
              67,
              111,
              114,
              112,
              46,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              56,
              46,
              57,
              44,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              52,
              104,
              34,
              58,
              50,
              46,
              56,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              50,
              52,
              104,
              34,
              58,
              49,
              57,
              48,
              48,
              48,
              48,
              48,
              48,
              46,
              48,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 2931
        },
        "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
        "assertions": [
          {
            "assertion": "Market prices request successful",
            "skipped": false
          },
          {
            "assertion": "Market prices has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aef2218e-5e8f-40ca-8d41-cce3d8fb161f",
          "length": 23,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1f7751d5-ed94-4819-9c63-a32737725f3c"
        },
        "item": {
          "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
          "name": "User Preferences - Get Preferences",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "preferences"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4bd26aec-83ef-4c0c-a9f3-de578abf8ac9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User preferences request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Preferences has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                  "});"
                ],
                "_lastExecutionId": "175c51da-94af-4ec8-95a8-61b909f475e8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "user",
              "preferences"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NDkwODY4MzV9.-zYON08rESiP9bxGpMhsTd2J6jnuzR6tXeqI3h584U0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aea00493-1892-418e-a1a9-fcd4f6c4306d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0a2349ce-f3b1-407a-a799-e9c0b0bb27c6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "27"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              67,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 27
        },
        "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
        "assertions": [
          {
            "assertion": "User preferences request successful",
            "skipped": false
          },
          {
            "assertion": "Preferences has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc7e54ff-153c-4fcd-8f43-043e7d630529",
          "length": 23,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f86721b1-d83c-447b-8d1a-5078a242ce3a"
        },
        "item": {
          "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
          "name": "Final Health Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b790704b-5fc6-465f-944d-b9626c13e04c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Final health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('System remains healthy after all tests', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});"
                ],
                "_lastExecutionId": "05bd6a53-86f4-4a0a-a883-04bea028c77f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e13bd0b-ed16-44d7-b39e-cb37b19e82e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXItMTc0OTA4NTAzNDcxNkBzdGFja21vdGl2ZS5jb20iLCJleHAiOjE3NTE2NzcwMzUsInR5cGUiOiJyZWZyZXNoIn0.2_3KsRKVSFsF53f7fP2X32c_scMAxNm1COWEThAkJa8",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "95bbb1b8-b10d-4db9-af83-274b9e491a93",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 05 Jun 2025 00:57:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "77"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              99,
              107,
              77,
              111,
              116,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 77
        },
        "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
        "assertions": [
          {
            "assertion": "Final health check successful",
            "skipped": false
          },
          {
            "assertion": "System remains healthy after all tests",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6079
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Portfolio has correct structure",
          "message": "expected { combinedHoldings: [ …(5) ], …(1) } to have property 'totalProfitLoss'",
          "stack": "AssertionError: expected { combinedHoldings: [ …(5) ], …(1) } to have property 'totalProfitLoss'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "6d0dea54a57ee0767f689eefee6a8505",
          "id": "b4cfd86d-eab2-4ab3-9cd6-eecca25154eb",
          "timestamp": 1749085035218,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
          "name": "Portfolio - Get Combined Portfolio",
          "request": {
            "url": {
              "path": [
                "api",
                "portfolio",
                "combined"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a810554-906b-46ba-833f-73a223db7669",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Portfolio request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Portfolio has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('totalValue');",
                  "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                  "    pm.expect(responseJson).to.have.property('accounts');",
                  "});"
                ],
                "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4fb8b76a-010f-4cc5-bb57-058a4700a7f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check has correct response', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "d8d9c385-f5a3-4cbd-9080-b17afd8df896"
                  }
                }
              ]
            },
            {
              "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
              "name": "Signup Flow - New User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "83094c5d-40af-4eee-a38f-c65340e38347",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for new user",
                      "const timestamp = Date.now();",
                      "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
                      "pm.collectionVariables.set('newUserEmail', newEmail);"
                    ],
                    "_lastExecutionId": "db60cd1b-e3c4-44d8-82ff-55e848c8bed1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ea85e38a-e384-4660-a6b1-1443064e0538",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Registration response has success message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "a754bb03-f61d-4f75-bcb2-0f181da4f1b6"
                  }
                }
              ]
            },
            {
              "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
              "name": "Signup Flow - Login New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11ced270-42db-44cd-9f25-159db24ea82a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('New user login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Login response has access token', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('access_token');",
                      "    pm.expect(responseJson.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', responseJson.access_token);",
                      "});"
                    ],
                    "_lastExecutionId": "21ad8bf5-2414-46fc-954d-c78c340293a9"
                  }
                }
              ]
            },
            {
              "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
              "name": "Onboarding - Check Initial Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88648dee-6a87-4086-9695-e70a13ada111",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New user has not completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "f102d3c0-26e2-4789-91eb-6c91eed2f99b"
                  }
                }
              ]
            },
            {
              "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
              "name": "Paper Trading - Create Account for New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73f58cb7-ea4b-4b33-97b2-adea645c6f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Paper trading account creation successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Paper trading account has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
                      "    ",
                      "    // Store account ID for later tests",
                      "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
                      "});",
                      "",
                      "pm.test('New account has initial balance', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.cashBalance).to.be.above(0);",
                      "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
                      "});"
                    ],
                    "_lastExecutionId": "2eb46a84-608e-4081-9c2b-00f73ced0740"
                  }
                }
              ]
            },
            {
              "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
              "name": "Portfolio - Check Empty Holdings",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account",
                    "{{paperAccountId}}",
                    "holdings"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acaf1222-2446-439f-88d3-97b37bb78ae7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Holdings request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New account has empty holdings', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(0);",
                      "});"
                    ],
                    "_lastExecutionId": "82c029c7-8219-41c9-bdca-3a87eb98de84"
                  }
                }
              ]
            },
            {
              "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
              "name": "Market Data - Get BTC Price",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "price",
                    "BTC"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d537154f-6d99-43ef-b017-f2c2cdb745bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market price request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Price data has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('symbol');",
                      "    pm.expect(responseJson).to.have.property('price');",
                      "    pm.expect(responseJson.symbol).to.eql('BTC');",
                      "    pm.expect(responseJson.price).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "e19227c3-39b1-4a48-93ba-3ca1c3b95647"
                  }
                }
              ]
            },
            {
              "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
              "name": "Watchlist - Get Mock Watchlist",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "watchlist"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53bc779c-5a24-45a6-898f-0b89a3a0fc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Watchlist request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Watchlist returns mock data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(3);",
                      "    pm.expect(responseJson[0]).to.have.property('symbol');",
                      "    pm.expect(responseJson[0]).to.have.property('name');",
                      "    pm.expect(responseJson[0]).to.have.property('price');",
                      "});"
                    ],
                    "_lastExecutionId": "06d6d7f3-708a-4519-b833-61a242ba41da"
                  }
                }
              ]
            },
            {
              "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
              "name": "Onboarding - Update Progress",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding",
                    "progress"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"step\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71cc0b9d-abf0-46b4-88da-fdfdb152f29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding progress update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Progress update response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "ade9b903-e1bb-44ca-be41-c55a23f7df6f"
                  }
                }
              ]
            },
            {
              "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
              "name": "Onboarding - Complete Onboarding",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-complete"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bdca5ac-5abb-4a2f-ae83-ce72b22545ee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding completion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Completion response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "924508d3-6464-423d-ae1e-a1f0c3af6ac3"
                  }
                }
              ]
            },
            {
              "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
              "name": "Onboarding - Verify Completion",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e9215a02-b42b-4622-9039-739468bee848",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User has completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "56df127f-8a90-4242-8f3f-1e4b80d27ecb"
                  }
                }
              ]
            },
            {
              "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
              "name": "Trial Status - Check User Trial",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "trial-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ca16361-ecf8-475c-ba15-3f4f01ad0eda",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Trial status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Trial status has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('inTrial');",
                      "    pm.expect(responseJson).to.have.property('trialEndsAt');",
                      "    pm.expect(responseJson).to.have.property('daysRemaining');",
                      "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
                      "});"
                    ],
                    "_lastExecutionId": "640bac8a-65f3-4981-aae8-1f0c6784f5bb"
                  }
                }
              ]
            },
            {
              "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
              "name": "Portfolio - Get Combined Portfolio",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "portfolio",
                    "combined"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a810554-906b-46ba-833f-73a223db7669",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Portfolio request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Portfolio has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('totalValue');",
                      "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                      "    pm.expect(responseJson).to.have.property('accounts');",
                      "});"
                    ],
                    "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
                  }
                }
              ]
            },
            {
              "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
              "name": "JWT Security - Test Invalid Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid_token_12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "275db9ce-f0de-4556-a4f3-2beb5828cef6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "42404eb4-9f79-4d82-a322-7bfb9033ce30"
                  }
                }
              ]
            },
            {
              "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
              "name": "JWT Security - Test No Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a34126-8e58-4869-aee8-635d781edec3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('No token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('No token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('authenticated');",
                      "});"
                    ],
                    "_lastExecutionId": "5df765a3-ffc2-451e-b774-5be1255efe1b"
                  }
                }
              ]
            },
            {
              "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
              "name": "JWT Security - Test Malformed Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer malformed.token.here"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4d211a06-c288-4ad5-a25a-a0a7afd894b1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Malformed token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "f33947b3-3f3f-44d6-bb7f-eede9611cd42"
                  }
                }
              ]
            },
            {
              "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
              "name": "Error Handling - Invalid Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0601b750-665e-46b4-b593-2056fbbb6367",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid registration returns 422', function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Invalid registration has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0c3137ba-1223-4471-b4d0-9b097834b034"
                  }
                }
              ]
            },
            {
              "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
              "name": "Error Handling - Invalid Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3daab57f-120e-498e-b1b2-3a31d69f4fcf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid login returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid login has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3217438a-00a4-4bac-9cc6-f9b501455d0a"
                  }
                }
              ]
            },
            {
              "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
              "name": "Error Handling - Duplicate Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate registration returns 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Duplicate registration has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
                  }
                }
              ]
            },
            {
              "id": "550e3200-6d90-45c5-8705-44e76540d205",
              "name": "Paper Trading - Attempt Duplicate Account Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate paper account returns existing account', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Returns existing account data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                      "});"
                    ],
                    "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
                  }
                }
              ]
            },
            {
              "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
              "name": "Market Data - Get Market Prices",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "prices"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e5e5e98-0f6e-4af8-873c-7d2f5ca86e41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market prices request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Market prices has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    if (responseJson.length > 0) {",
                      "        pm.expect(responseJson[0]).to.have.property('symbol');",
                      "        pm.expect(responseJson[0]).to.have.property('price');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "543a54ca-f199-4696-b4d1-0fef6545bb7a"
                  }
                }
              ]
            },
            {
              "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
              "name": "User Preferences - Get Preferences",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "preferences"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4bd26aec-83ef-4c0c-a9f3-de578abf8ac9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User preferences request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Preferences has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "175c51da-94af-4ec8-95a8-61b909f475e8"
                  }
                }
              ]
            },
            {
              "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
              "name": "Final Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b790704b-5fc6-465f-944d-b9626c13e04c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Final health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('System remains healthy after all tests', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "05bd6a53-86f4-4a0a-a883-04bea028c77f"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8000",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "",
              "key": "authToken"
            },
            {
              "type": "string",
              "value": "",
              "key": "newUserEmail"
            },
            {
              "type": "string",
              "value": "TestPassword123!",
              "key": "newUserPassword"
            },
            {
              "type": "string",
              "value": "",
              "key": "paperAccountId"
            },
            {
              "type": "string",
              "value": "maddy@stackmotiveapp.com",
              "key": "testEmail"
            },
            {
              "type": "string",
              "value": "yhj@kzm4PYW-akj2jdg",
              "key": "testPassword"
            }
          ],
          "info": {
            "_postman_id": "ff5ffe1b-c148-46ce-97fa-b8c2630e1985",
            "name": "StackMotive Comprehensive API Tests - Fixed",
            "version": {
              "raw": "2.1.0",
              "major": 2,
              "minor": 1,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "2.1.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Extended API test suite covering signup, onboarding, paper trading, JWT handling, and comprehensive user flows - corrected for actual endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "08e8f106-7179-47c0-9427-83583ca446ba",
          "length": 23,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "969ebe82-1fea-4ee3-bd8a-225b488fedfb",
          "scriptId": "0a810554-906b-46ba-833f-73a223db7669",
          "execution": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Duplicate registration has error message",
          "message": "expected 'Email already registered' to include 'already exists'",
          "stack": "AssertionError: expected 'Email already registered' to include 'already exists'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "9992782309b68d055d489ca6899336d4",
          "id": "0058f1f1-a491-4fe4-a549-6c1e01522c87",
          "timestamp": 1749085035283,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
          "name": "Error Handling - Duplicate Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate registration returns 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Duplicate registration has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "    pm.expect(responseJson.detail).to.include('already exists');",
                  "});"
                ],
                "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4fb8b76a-010f-4cc5-bb57-058a4700a7f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check has correct response', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "d8d9c385-f5a3-4cbd-9080-b17afd8df896"
                  }
                }
              ]
            },
            {
              "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
              "name": "Signup Flow - New User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "83094c5d-40af-4eee-a38f-c65340e38347",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for new user",
                      "const timestamp = Date.now();",
                      "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
                      "pm.collectionVariables.set('newUserEmail', newEmail);"
                    ],
                    "_lastExecutionId": "db60cd1b-e3c4-44d8-82ff-55e848c8bed1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ea85e38a-e384-4660-a6b1-1443064e0538",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Registration response has success message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "a754bb03-f61d-4f75-bcb2-0f181da4f1b6"
                  }
                }
              ]
            },
            {
              "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
              "name": "Signup Flow - Login New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11ced270-42db-44cd-9f25-159db24ea82a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('New user login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Login response has access token', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('access_token');",
                      "    pm.expect(responseJson.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', responseJson.access_token);",
                      "});"
                    ],
                    "_lastExecutionId": "21ad8bf5-2414-46fc-954d-c78c340293a9"
                  }
                }
              ]
            },
            {
              "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
              "name": "Onboarding - Check Initial Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88648dee-6a87-4086-9695-e70a13ada111",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New user has not completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "f102d3c0-26e2-4789-91eb-6c91eed2f99b"
                  }
                }
              ]
            },
            {
              "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
              "name": "Paper Trading - Create Account for New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73f58cb7-ea4b-4b33-97b2-adea645c6f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Paper trading account creation successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Paper trading account has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
                      "    ",
                      "    // Store account ID for later tests",
                      "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
                      "});",
                      "",
                      "pm.test('New account has initial balance', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.cashBalance).to.be.above(0);",
                      "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
                      "});"
                    ],
                    "_lastExecutionId": "2eb46a84-608e-4081-9c2b-00f73ced0740"
                  }
                }
              ]
            },
            {
              "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
              "name": "Portfolio - Check Empty Holdings",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account",
                    "{{paperAccountId}}",
                    "holdings"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acaf1222-2446-439f-88d3-97b37bb78ae7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Holdings request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New account has empty holdings', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(0);",
                      "});"
                    ],
                    "_lastExecutionId": "82c029c7-8219-41c9-bdca-3a87eb98de84"
                  }
                }
              ]
            },
            {
              "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
              "name": "Market Data - Get BTC Price",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "price",
                    "BTC"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d537154f-6d99-43ef-b017-f2c2cdb745bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market price request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Price data has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('symbol');",
                      "    pm.expect(responseJson).to.have.property('price');",
                      "    pm.expect(responseJson.symbol).to.eql('BTC');",
                      "    pm.expect(responseJson.price).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "e19227c3-39b1-4a48-93ba-3ca1c3b95647"
                  }
                }
              ]
            },
            {
              "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
              "name": "Watchlist - Get Mock Watchlist",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "watchlist"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53bc779c-5a24-45a6-898f-0b89a3a0fc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Watchlist request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Watchlist returns mock data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(3);",
                      "    pm.expect(responseJson[0]).to.have.property('symbol');",
                      "    pm.expect(responseJson[0]).to.have.property('name');",
                      "    pm.expect(responseJson[0]).to.have.property('price');",
                      "});"
                    ],
                    "_lastExecutionId": "06d6d7f3-708a-4519-b833-61a242ba41da"
                  }
                }
              ]
            },
            {
              "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
              "name": "Onboarding - Update Progress",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding",
                    "progress"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"step\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71cc0b9d-abf0-46b4-88da-fdfdb152f29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding progress update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Progress update response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "ade9b903-e1bb-44ca-be41-c55a23f7df6f"
                  }
                }
              ]
            },
            {
              "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
              "name": "Onboarding - Complete Onboarding",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-complete"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bdca5ac-5abb-4a2f-ae83-ce72b22545ee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding completion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Completion response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "924508d3-6464-423d-ae1e-a1f0c3af6ac3"
                  }
                }
              ]
            },
            {
              "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
              "name": "Onboarding - Verify Completion",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e9215a02-b42b-4622-9039-739468bee848",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User has completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "56df127f-8a90-4242-8f3f-1e4b80d27ecb"
                  }
                }
              ]
            },
            {
              "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
              "name": "Trial Status - Check User Trial",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "trial-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ca16361-ecf8-475c-ba15-3f4f01ad0eda",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Trial status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Trial status has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('inTrial');",
                      "    pm.expect(responseJson).to.have.property('trialEndsAt');",
                      "    pm.expect(responseJson).to.have.property('daysRemaining');",
                      "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
                      "});"
                    ],
                    "_lastExecutionId": "640bac8a-65f3-4981-aae8-1f0c6784f5bb"
                  }
                }
              ]
            },
            {
              "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
              "name": "Portfolio - Get Combined Portfolio",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "portfolio",
                    "combined"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a810554-906b-46ba-833f-73a223db7669",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Portfolio request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Portfolio has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('totalValue');",
                      "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                      "    pm.expect(responseJson).to.have.property('accounts');",
                      "});"
                    ],
                    "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
                  }
                }
              ]
            },
            {
              "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
              "name": "JWT Security - Test Invalid Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid_token_12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "275db9ce-f0de-4556-a4f3-2beb5828cef6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "42404eb4-9f79-4d82-a322-7bfb9033ce30"
                  }
                }
              ]
            },
            {
              "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
              "name": "JWT Security - Test No Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a34126-8e58-4869-aee8-635d781edec3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('No token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('No token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('authenticated');",
                      "});"
                    ],
                    "_lastExecutionId": "5df765a3-ffc2-451e-b774-5be1255efe1b"
                  }
                }
              ]
            },
            {
              "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
              "name": "JWT Security - Test Malformed Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer malformed.token.here"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4d211a06-c288-4ad5-a25a-a0a7afd894b1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Malformed token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "f33947b3-3f3f-44d6-bb7f-eede9611cd42"
                  }
                }
              ]
            },
            {
              "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
              "name": "Error Handling - Invalid Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0601b750-665e-46b4-b593-2056fbbb6367",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid registration returns 422', function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Invalid registration has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0c3137ba-1223-4471-b4d0-9b097834b034"
                  }
                }
              ]
            },
            {
              "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
              "name": "Error Handling - Invalid Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3daab57f-120e-498e-b1b2-3a31d69f4fcf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid login returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid login has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3217438a-00a4-4bac-9cc6-f9b501455d0a"
                  }
                }
              ]
            },
            {
              "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
              "name": "Error Handling - Duplicate Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate registration returns 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Duplicate registration has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
                  }
                }
              ]
            },
            {
              "id": "550e3200-6d90-45c5-8705-44e76540d205",
              "name": "Paper Trading - Attempt Duplicate Account Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate paper account returns existing account', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Returns existing account data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                      "});"
                    ],
                    "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
                  }
                }
              ]
            },
            {
              "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
              "name": "Market Data - Get Market Prices",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "prices"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e5e5e98-0f6e-4af8-873c-7d2f5ca86e41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market prices request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Market prices has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    if (responseJson.length > 0) {",
                      "        pm.expect(responseJson[0]).to.have.property('symbol');",
                      "        pm.expect(responseJson[0]).to.have.property('price');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "543a54ca-f199-4696-b4d1-0fef6545bb7a"
                  }
                }
              ]
            },
            {
              "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
              "name": "User Preferences - Get Preferences",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "preferences"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4bd26aec-83ef-4c0c-a9f3-de578abf8ac9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User preferences request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Preferences has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "175c51da-94af-4ec8-95a8-61b909f475e8"
                  }
                }
              ]
            },
            {
              "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
              "name": "Final Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b790704b-5fc6-465f-944d-b9626c13e04c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Final health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('System remains healthy after all tests', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "05bd6a53-86f4-4a0a-a883-04bea028c77f"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8000",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "",
              "key": "authToken"
            },
            {
              "type": "string",
              "value": "",
              "key": "newUserEmail"
            },
            {
              "type": "string",
              "value": "TestPassword123!",
              "key": "newUserPassword"
            },
            {
              "type": "string",
              "value": "",
              "key": "paperAccountId"
            },
            {
              "type": "string",
              "value": "maddy@stackmotiveapp.com",
              "key": "testEmail"
            },
            {
              "type": "string",
              "value": "yhj@kzm4PYW-akj2jdg",
              "key": "testPassword"
            }
          ],
          "info": {
            "_postman_id": "ff5ffe1b-c148-46ce-97fa-b8c2630e1985",
            "name": "StackMotive Comprehensive API Tests - Fixed",
            "version": {
              "raw": "2.1.0",
              "major": 2,
              "minor": 1,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "2.1.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Extended API test suite covering signup, onboarding, paper trading, JWT handling, and comprehensive user flows - corrected for actual endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "67541028-8fb7-460f-8e6b-a311ac38f4f0",
          "length": 23,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "95c15f42-5510-4c59-af6f-6d2291727758",
          "scriptId": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
          "execution": "43189ac0-ddf1-4b4e-9182-67cb99403017"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Returns existing account data",
          "message": "expected 79 to deeply equal '79'",
          "stack": "AssertionError: expected 79 to deeply equal '79'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "32bd9faae7202866d78d8e3413c36514",
          "id": "6511b44b-2358-4951-a4dd-19005c833f46",
          "timestamp": 1749085035295,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "550e3200-6d90-45c5-8705-44e76540d205",
          "name": "Paper Trading - Attempt Duplicate Account Creation",
          "request": {
            "url": {
              "path": [
                "api",
                "user",
                "paper-trading-account"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate paper account returns existing account', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Returns existing account data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('cashBalance');",
                  "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                  "});"
                ],
                "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "db4af284-30e7-4ee4-86b4-2a3c7efa4bb0",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4fb8b76a-010f-4cc5-bb57-058a4700a7f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check has correct response', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "d8d9c385-f5a3-4cbd-9080-b17afd8df896"
                  }
                }
              ]
            },
            {
              "id": "638dba63-bf2b-4aed-8a0f-8c5776c1dc18",
              "name": "Signup Flow - New User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "83094c5d-40af-4eee-a38f-c65340e38347",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for new user",
                      "const timestamp = Date.now();",
                      "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
                      "pm.collectionVariables.set('newUserEmail', newEmail);"
                    ],
                    "_lastExecutionId": "db60cd1b-e3c4-44d8-82ff-55e848c8bed1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ea85e38a-e384-4660-a6b1-1443064e0538",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Registration response has success message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('successfully');",
                      "});"
                    ],
                    "_lastExecutionId": "a754bb03-f61d-4f75-bcb2-0f181da4f1b6"
                  }
                }
              ]
            },
            {
              "id": "f06aeea4-860f-4342-af77-1e20b2a7066f",
              "name": "Signup Flow - Login New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11ced270-42db-44cd-9f25-159db24ea82a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('New user login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Login response has access token', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('access_token');",
                      "    pm.expect(responseJson.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', responseJson.access_token);",
                      "});"
                    ],
                    "_lastExecutionId": "21ad8bf5-2414-46fc-954d-c78c340293a9"
                  }
                }
              ]
            },
            {
              "id": "9ddc3580-6383-4370-815d-4780e36a8db4",
              "name": "Onboarding - Check Initial Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88648dee-6a87-4086-9695-e70a13ada111",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New user has not completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "f102d3c0-26e2-4789-91eb-6c91eed2f99b"
                  }
                }
              ]
            },
            {
              "id": "eeae328a-768c-42d6-9252-5d70c02a51df",
              "name": "Paper Trading - Create Account for New User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73f58cb7-ea4b-4b33-97b2-adea645c6f20",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Paper trading account creation successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Paper trading account has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
                      "    ",
                      "    // Store account ID for later tests",
                      "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
                      "});",
                      "",
                      "pm.test('New account has initial balance', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.cashBalance).to.be.above(0);",
                      "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
                      "});"
                    ],
                    "_lastExecutionId": "2eb46a84-608e-4081-9c2b-00f73ced0740"
                  }
                }
              ]
            },
            {
              "id": "82c3290e-c673-4aa6-bf27-a658f075c93c",
              "name": "Portfolio - Check Empty Holdings",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account",
                    "{{paperAccountId}}",
                    "holdings"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acaf1222-2446-439f-88d3-97b37bb78ae7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Holdings request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('New account has empty holdings', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(0);",
                      "});"
                    ],
                    "_lastExecutionId": "82c029c7-8219-41c9-bdca-3a87eb98de84"
                  }
                }
              ]
            },
            {
              "id": "1c91b7d4-d2a0-42a1-acd2-9341d256fad3",
              "name": "Market Data - Get BTC Price",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "price",
                    "BTC"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d537154f-6d99-43ef-b017-f2c2cdb745bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market price request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Price data has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('symbol');",
                      "    pm.expect(responseJson).to.have.property('price');",
                      "    pm.expect(responseJson.symbol).to.eql('BTC');",
                      "    pm.expect(responseJson.price).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "e19227c3-39b1-4a48-93ba-3ca1c3b95647"
                  }
                }
              ]
            },
            {
              "id": "bac4835a-a21f-403a-a408-2a4068cbdc94",
              "name": "Watchlist - Get Mock Watchlist",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "watchlist"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53bc779c-5a24-45a6-898f-0b89a3a0fc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Watchlist request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Watchlist returns mock data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    pm.expect(responseJson).to.have.lengthOf(3);",
                      "    pm.expect(responseJson[0]).to.have.property('symbol');",
                      "    pm.expect(responseJson[0]).to.have.property('name');",
                      "    pm.expect(responseJson[0]).to.have.property('price');",
                      "});"
                    ],
                    "_lastExecutionId": "06d6d7f3-708a-4519-b833-61a242ba41da"
                  }
                }
              ]
            },
            {
              "id": "1840230d-aed9-42cc-ab3f-e0daac465e4f",
              "name": "Onboarding - Update Progress",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding",
                    "progress"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"step\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71cc0b9d-abf0-46b4-88da-fdfdb152f29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding progress update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Progress update response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "ade9b903-e1bb-44ca-be41-c55a23f7df6f"
                  }
                }
              ]
            },
            {
              "id": "e32e1ab6-adf5-41ab-8a5a-f90ccf773170",
              "name": "Onboarding - Complete Onboarding",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-complete"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bdca5ac-5abb-4a2f-ae83-ce72b22545ee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding completion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Completion response is valid', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "924508d3-6464-423d-ae1e-a1f0c3af6ac3"
                  }
                }
              ]
            },
            {
              "id": "df63da25-aff0-4b41-82c2-05f309a743ce",
              "name": "Onboarding - Verify Completion",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "onboarding-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e9215a02-b42b-4622-9039-739468bee848",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Onboarding status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User has completed onboarding', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
                      "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "56df127f-8a90-4242-8f3f-1e4b80d27ecb"
                  }
                }
              ]
            },
            {
              "id": "3eeb802e-aabc-4d9a-97d4-7e968c3e027f",
              "name": "Trial Status - Check User Trial",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "trial-status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ca16361-ecf8-475c-ba15-3f4f01ad0eda",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Trial status check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Trial status has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('inTrial');",
                      "    pm.expect(responseJson).to.have.property('trialEndsAt');",
                      "    pm.expect(responseJson).to.have.property('daysRemaining');",
                      "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
                      "});"
                    ],
                    "_lastExecutionId": "640bac8a-65f3-4981-aae8-1f0c6784f5bb"
                  }
                }
              ]
            },
            {
              "id": "22b4b9f0-0434-4821-9250-d1c90185bf28",
              "name": "Portfolio - Get Combined Portfolio",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "portfolio",
                    "combined"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a810554-906b-46ba-833f-73a223db7669",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Portfolio request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Portfolio has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('totalValue');",
                      "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
                      "    pm.expect(responseJson).to.have.property('accounts');",
                      "});"
                    ],
                    "_lastExecutionId": "3c57ff5e-ecbc-4d4a-909e-484a022f718e"
                  }
                }
              ]
            },
            {
              "id": "2c543f73-5377-4c23-bb08-f939cd1719e3",
              "name": "JWT Security - Test Invalid Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid_token_12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "275db9ce-f0de-4556-a4f3-2beb5828cef6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "42404eb4-9f79-4d82-a322-7bfb9033ce30"
                  }
                }
              ]
            },
            {
              "id": "8c1121a0-6da4-4f7e-a1ca-d79e55c63f33",
              "name": "JWT Security - Test No Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a34126-8e58-4869-aee8-635d781edec3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('No token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('No token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('authenticated');",
                      "});"
                    ],
                    "_lastExecutionId": "5df765a3-ffc2-451e-b774-5be1255efe1b"
                  }
                }
              ]
            },
            {
              "id": "b3ece7f3-bf1f-4d2d-9460-39812e65dc7d",
              "name": "JWT Security - Test Malformed Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer malformed.token.here"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4d211a06-c288-4ad5-a25a-a0a7afd894b1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed token returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Malformed token has correct error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('credentials');",
                      "});"
                    ],
                    "_lastExecutionId": "f33947b3-3f3f-44d6-bb7f-eede9611cd42"
                  }
                }
              ]
            },
            {
              "id": "d985e457-4ced-41b0-8dc7-5a5fc74b4c59",
              "name": "Error Handling - Invalid Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0601b750-665e-46b4-b593-2056fbbb6367",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid registration returns 422', function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test('Invalid registration has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0c3137ba-1223-4471-b4d0-9b097834b034"
                  }
                }
              ]
            },
            {
              "id": "ed000aff-5ea6-4b27-89ef-97b3126d2708",
              "name": "Error Handling - Invalid Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3daab57f-120e-498e-b1b2-3a31d69f4fcf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid login returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Invalid login has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3217438a-00a4-4bac-9cc6-f9b501455d0a"
                  }
                }
              ]
            },
            {
              "id": "0b2a5ad8-b4cf-4938-ba0b-2052bb73394b",
              "name": "Error Handling - Duplicate Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ffe5853-d592-4625-9dc6-de4b4e8d79e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate registration returns 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Duplicate registration has error message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('detail');",
                      "    pm.expect(responseJson.detail).to.include('already exists');",
                      "});"
                    ],
                    "_lastExecutionId": "43189ac0-ddf1-4b4e-9182-67cb99403017"
                  }
                }
              ]
            },
            {
              "id": "550e3200-6d90-45c5-8705-44e76540d205",
              "name": "Paper Trading - Attempt Duplicate Account Creation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "paper-trading-account"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "63d2f77f-011a-458c-99cb-20a086be19b0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate paper account returns existing account', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Returns existing account data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('name');",
                      "    pm.expect(responseJson).to.have.property('cashBalance');",
                      "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
                      "});"
                    ],
                    "_lastExecutionId": "403827f9-4b41-464e-a371-95a82872353a"
                  }
                }
              ]
            },
            {
              "id": "3fa8e9a3-a3d1-421a-bab8-8eda8f8d0fd3",
              "name": "Market Data - Get Market Prices",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "market",
                    "prices"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e5e5e98-0f6e-4af8-873c-7d2f5ca86e41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Market prices request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Market prices has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "    if (responseJson.length > 0) {",
                      "        pm.expect(responseJson[0]).to.have.property('symbol');",
                      "        pm.expect(responseJson[0]).to.have.property('price');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "543a54ca-f199-4696-b4d1-0fef6545bb7a"
                  }
                }
              ]
            },
            {
              "id": "56a0fd93-33d6-4035-a0d0-f8fa7f933903",
              "name": "User Preferences - Get Preferences",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "user",
                    "preferences"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4bd26aec-83ef-4c0c-a9f3-de578abf8ac9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User preferences request successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Preferences has correct structure', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('preferredCurrency');",
                      "});"
                    ],
                    "_lastExecutionId": "175c51da-94af-4ec8-95a8-61b909f475e8"
                  }
                }
              ]
            },
            {
              "id": "ce335d4e-2e0d-43e7-a485-1c4cffd851e8",
              "name": "Final Health Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b790704b-5fc6-465f-944d-b9626c13e04c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Final health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('System remains healthy after all tests', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('status');",
                      "    pm.expect(responseJson.status).to.eql('healthy');",
                      "});"
                    ],
                    "_lastExecutionId": "05bd6a53-86f4-4a0a-a883-04bea028c77f"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8000",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "",
              "key": "authToken"
            },
            {
              "type": "string",
              "value": "",
              "key": "newUserEmail"
            },
            {
              "type": "string",
              "value": "TestPassword123!",
              "key": "newUserPassword"
            },
            {
              "type": "string",
              "value": "",
              "key": "paperAccountId"
            },
            {
              "type": "string",
              "value": "maddy@stackmotiveapp.com",
              "key": "testEmail"
            },
            {
              "type": "string",
              "value": "yhj@kzm4PYW-akj2jdg",
              "key": "testPassword"
            }
          ],
          "info": {
            "_postman_id": "ff5ffe1b-c148-46ce-97fa-b8c2630e1985",
            "name": "StackMotive Comprehensive API Tests - Fixed",
            "version": {
              "raw": "2.1.0",
              "major": 2,
              "minor": 1,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "2.1.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Extended API test suite covering signup, onboarding, paper trading, JWT handling, and comprehensive user flows - corrected for actual endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "1b66c497-e8bb-4338-8aec-539593f44a26",
          "length": 23,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1d099b02-6f97-42d3-9bd0-1d48e5772458",
          "scriptId": "63d2f77f-011a-458c-99cb-20a086be19b0",
          "execution": "403827f9-4b41-464e-a371-95a82872353a"
        }
      }
    ],
    "error": null
  }
}