{
  "info": {
    "name": "StackMotive Comprehensive API Tests - Fixed",
    "description": "Extended API test suite covering signup, onboarding, paper trading, JWT handling, and comprehensive user flows - corrected for actual endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "newUserEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "newUserPassword",
      "value": "TestPassword123!",
      "type": "string"
    },
    {
      "key": "paperAccountId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "maddy@stackmotiveapp.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "yhj@kzm4PYW-akj2jdg",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Health check has correct response', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status');",
              "    pm.expect(responseJson.status).to.eql('healthy');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      }
    },
    {
      "name": "Signup Flow - New User Registration",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate unique email for new user",
              "const timestamp = Date.now();",
              "const newEmail = `test-user-${timestamp}@stackmotive.com`;",
              "pm.collectionVariables.set('newUserEmail', newEmail);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Registration successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Registration response has success message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('successfully');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "register"]
        }
      }
    },
    {
      "name": "Signup Flow - Login New User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('New user login successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Login response has access token', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('access_token');",
              "    pm.expect(responseJson.access_token).to.be.a('string');",
              "    ",
              "    // Store token for subsequent requests",
              "    pm.collectionVariables.set('authToken', responseJson.access_token);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "login"]
        }
      }
    },
    {
      "name": "Onboarding - Check Initial Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Onboarding status check successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('New user has not completed onboarding', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
              "    pm.expect(responseJson.hasCompletedOnboarding).to.be.false;",
              "    pm.expect(responseJson).to.have.property('preferredCurrency');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/onboarding-status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "onboarding-status"]
        }
      }
    },
    {
      "name": "Paper Trading - Create Account for New User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Paper trading account creation successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Paper trading account has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('name');",
              "    pm.expect(responseJson).to.have.property('cashBalance');",
              "    pm.expect(responseJson).to.have.property('totalPortfolioValue');",
              "    ",
              "    // Store account ID for later tests",
              "    pm.collectionVariables.set('paperAccountId', responseJson.id);",
              "});",
              "",
              "pm.test('New account has initial balance', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.cashBalance).to.be.above(0);",
              "    pm.expect(responseJson.totalPortfolioValue).to.equal(responseJson.cashBalance);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"My Test Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 100000\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/user/paper-trading-account",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "paper-trading-account"]
        }
      }
    },
    {
      "name": "Portfolio - Check Empty Holdings",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Holdings request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('New account has empty holdings', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "    pm.expect(responseJson).to.have.lengthOf(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/paper-trading-account/{{paperAccountId}}/holdings",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "paper-trading-account", "{{paperAccountId}}", "holdings"]
        }
      }
    },
    {
      "name": "Market Data - Get BTC Price",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Market price request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Price data has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('symbol');",
              "    pm.expect(responseJson).to.have.property('price');",
              "    pm.expect(responseJson.symbol).to.eql('BTC');",
              "    pm.expect(responseJson.price).to.be.a('number');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/market/price/BTC",
          "host": ["{{baseUrl}}"],
          "path": ["api", "market", "price", "BTC"]
        }
      }
    },
    {
      "name": "Watchlist - Get Mock Watchlist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Watchlist request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Watchlist returns mock data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "    pm.expect(responseJson).to.have.lengthOf(3);",
              "    pm.expect(responseJson[0]).to.have.property('symbol');",
              "    pm.expect(responseJson[0]).to.have.property('name');",
              "    pm.expect(responseJson[0]).to.have.property('price');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/watchlist",
          "host": ["{{baseUrl}}"],
          "path": ["api", "watchlist"]
        }
      }
    },
    {
      "name": "Onboarding - Update Progress",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Onboarding progress update successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Progress update response is valid', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('updated');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"step\": 3\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/user/onboarding/progress",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "onboarding", "progress"]
        }
      }
    },
    {
      "name": "Onboarding - Complete Onboarding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Onboarding completion successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Completion response is valid', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('message');",
              "    pm.expect(responseJson.message).to.include('updated');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"hasCompletedOnboarding\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/user/onboarding-complete",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "onboarding-complete"]
        }
      }
    },
    {
      "name": "Onboarding - Verify Completion",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Onboarding status check successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User has completed onboarding', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('hasCompletedOnboarding');",
              "    pm.expect(responseJson.hasCompletedOnboarding).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/onboarding-status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "onboarding-status"]
        }
      }
    },
    {
      "name": "Trial Status - Check User Trial",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Trial status check successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Trial status has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('inTrial');",
              "    pm.expect(responseJson).to.have.property('trialEndsAt');",
              "    pm.expect(responseJson).to.have.property('daysRemaining');",
              "    pm.expect(responseJson.inTrial).to.be.a('boolean');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/trial-status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "trial-status"]
        }
      }
    },
    {
      "name": "Portfolio - Get Combined Portfolio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Portfolio request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Portfolio has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('totalValue');",
              "    pm.expect(responseJson).to.have.property('totalProfitLoss');",
              "    pm.expect(responseJson).to.have.property('accounts');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/portfolio/combined",
          "host": ["{{baseUrl}}"],
          "path": ["api", "portfolio", "combined"]
        }
      }
    },
    {
      "name": "JWT Security - Test Invalid Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid token returns 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Invalid token has correct error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "    pm.expect(responseJson.detail).to.include('credentials');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid_token_12345"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/me",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "me"]
        }
      }
    },
    {
      "name": "JWT Security - Test No Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('No token returns 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('No token has correct error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "    pm.expect(responseJson.detail).to.include('authenticated');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/user/me",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "me"]
        }
      }
    },
    {
      "name": "JWT Security - Test Malformed Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Malformed token returns 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Malformed token has correct error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "    pm.expect(responseJson.detail).to.include('credentials');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer malformed.token.here"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/me",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "me"]
        }
      }
    },
    {
      "name": "Error Handling - Invalid Registration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid registration returns 422', function () {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test('Invalid registration has validation error', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "register"]
        }
      }
    },
    {
      "name": "Error Handling - Invalid Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid login returns 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Invalid login has error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "login"]
        }
      }
    },
    {
      "name": "Error Handling - Duplicate Registration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Duplicate registration returns 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Duplicate registration has error message', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('detail');",
              "    pm.expect(responseJson.detail).to.include('already exists');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "register"]
        }
      }
    },
    {
      "name": "Paper Trading - Attempt Duplicate Account Creation",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Duplicate paper account returns existing account', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Returns existing account data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('id');",
              "    pm.expect(responseJson).to.have.property('name');",
              "    pm.expect(responseJson).to.have.property('cashBalance');",
              "    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get('paperAccountId'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Another Trading Account\",\n  \"currency\": \"USD\",\n  \"initialBalance\": 50000\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/user/paper-trading-account",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "paper-trading-account"]
        }
      }
    },
    {
      "name": "Market Data - Get Market Prices",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Market prices request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Market prices has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.be.an('array');",
              "    if (responseJson.length > 0) {",
              "        pm.expect(responseJson[0]).to.have.property('symbol');",
              "        pm.expect(responseJson[0]).to.have.property('price');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/market/prices",
          "host": ["{{baseUrl}}"],
          "path": ["api", "market", "prices"]
        }
      }
    },
    {
      "name": "User Preferences - Get Preferences",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('User preferences request successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Preferences has correct structure', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('preferredCurrency');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/user/preferences",
          "host": ["{{baseUrl}}"],
          "path": ["api", "user", "preferences"]
        }
      }
    },
    {
      "name": "Final Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Final health check successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('System remains healthy after all tests', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('status');",
              "    pm.expect(responseJson.status).to.eql('healthy');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      }
    }
  ]
} 